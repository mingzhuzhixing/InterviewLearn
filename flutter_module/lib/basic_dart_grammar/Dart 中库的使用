0、dart中的库说明：
   1、Dart 中你可以导入一个库来使用它所提供的功能。
   2、Dart 中任何一个 dart 文件都是一个库，即使你没有用关键字 library 声明。
   库导入的语法：
    import '库所在的 uri';

1、使用系统的库
   系统库的 uri 一般以 dart: 开头，常见的系统库有：dart:io、dart:async、dart:math 等：
   例如：
   // import 'dart:io';
   // import 'dart:isolate';
   // import 'dart:async';
   // import 'dart:math';

   // 系统的库：import 'dart:库的名字';

   import 'dart:math';

   main(List<String> args) {
     final num1 = 20;
     final num2 = 30;
     print(min(num1, num2));
   }

   注意：dart:core 也是很常用的系统库，不过可以省略不写。


2、使用自定义库
   自定义库就是自己项目中定义的其他 dart 文件，比如在 utils 目录下创建一个 math_utils.dart 文件，内容如下：
   // utils 目录下的 math_utils.dart 文件内容：
   int sum(int num1, int num2) {
     return num1 + num2;
   }

   int mul(int num1, int num2) {
     return num1 * num2;
   }

   这里的 math_utils.dart 文件就是一个自定义库，你可以在其他 dart 文件中导入：
   // 导入自定义库可以是相对路径或绝对路径。
   import 'utils/math_utils.dart';

   main(List<String> args) {
     print(sum(20, 30));
   }

3、使用第三方库
   那些存放在远程仓库上的库文件就是第三方库，如果项目中需要依赖第三方库，就需要在项目目录下创建一个 pubspec.yaml 文件，其中 dependencies 部分填写要依赖的第三方库的描述（库名: 版本）：
   例如：
   name: myProjectName
   description: my project name
   dependencies:
     http: ^0.12.0+4
   environment:
     sdk: ">=2.10.0 <3.0.0"

   说明：可以在 pub.dev 上查找第三方库的使用说明。

   填写好依赖后，需要执行 dart pub get 或 flutter pub get 命令，让终端从服务器上拉取第三方对应的版本文件，之后就可以在代码中使用这个第三方库了：
   例如：
   import 'package:http/http.dart' as http;

   main(List<String> args) async {
     var url = 'https://example.com/whatsit/create';
     var response = await http.post(url, body: {'name': 'doodle', 'color': 'blue'});
     print('Response status: ${response.statusCode}');
     print('Response body: ${response.body}');
     print(await http.read('https://example.com/foobar.txt'));
   }

4、库方法名冲突
   比如：math_utils.dart 库中有 int sum(int num1, int num2) 方法，当前 dart 文件中又定义了 void sum(int num1, int num2) 方法，这 2 个方法名相同，但返回值不同：
   例如：
   import 'utils/math_utils.dart';

   main(List<String> args) {
     print(sum(20, 30)); // IDE报错：This experssion has a type of 'void' so its value can't be used.
   }

   // void sum(num1, num2) // 参数类型可以不写，默认是 dynamic
   void sum(int num1, int num2) {
     print(num1 + num2);
   }

   这时，当前 dart 文件识别到的是自己的 sum()方法，而实际上我们想要使用的是 math_utils.dart 库中 sum()方法，这就发生了库方法名冲突，可以使用 as 关键字给库起别名来解决：
   例如：
   import 'utils/math_utils.dart' as mUtils;

   main(List<String> args) {
     print(mUtils.sum(20, 30));
   }

   void sum(sum1, sum2) {
     print(sum1 + sum2);
   }


