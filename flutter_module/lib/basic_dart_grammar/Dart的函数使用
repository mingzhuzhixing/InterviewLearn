1、函数的基本使用
   Dart 的函数定义：
   返回值 函数的名称(参数列表) {
     函数体
     return 返回值
   }

   例子：
   main(List<String> args) {
     print(sum(20, 30));
   }

   int sum(int num1, int num2) {
     return num1 + num2;
   }

   //返回值的类型可以省略（开发中不推荐）
   sum(int num1, int num2) {
      return num1 + num2;
   }

2、函数的可选参数
   Dart 的函数参数有两类： 1、必选参数：必须传   2、可选参数：可不传
   例如：
   main(List<String> args) {
     sayHello1("lqr");
   }

   // 必选参数：必须传
   void sayHello1(String name) {
     print(name);
   }

   可选参数有 2 种：
   1、位置可选参数：[int age, double height]
   2、命名可选参数：{int age, double height}
   例如：
   main(List<String> args) {
     sayHello2("lqr");
     sayHello2("lqr", 18, 1.88);

     sayHello3("lqr", age: 18, height: 1.88);
     sayHello3("lqr", height: 1.88, age: 18);
     sayHello3("lqr", height: 1.88);
   }

   // 位置可选参数：[int age, double height]
   // 实参和形参在进行匹配时，是根据位置来匹配
   void sayHello2(String name, [int age, double height]) {}

   // 命名可选参数：{int age, double height}
   // 实参和形参在进行匹配时，是根据变量名来匹配
   void sayHello3(String name, {int age, double height}) {}

3、函数的默认参数
   Dart 中没有函数重载!!!  Dart 中没有函数重载!!!  Dart 中没有函数重载!!!  但是，Dart 函数支持为可选参数设置默认值：
   例如：
   void sayHello1(String name) {
     print(name);
   }
   // Dart中没有函数的重载
   // void sayHello1(){ // IDE报错：The name 'sayHello1' is already defined.
   //   ...
   // }

   // 注意：只有可选参数才可以有默认值，必传参数没有默认值
   void sayHello4(String name, [int age = 20, double height = 1.7]) {}
   void sayHello5(String name, {int age = 20, double height = 1.7}) {}

   注意：只有可选参数才能设置默认值。

4、函数是一等公民
   函数是一等公民 意味着可以将函数赋值给一个变量，也可以将函数作为另外一个函数的参数或返回值来使用。
   例如：
   main(List<String> args) {
     // 1. 直接找到另外一个定义的函数传进去
     test(bar); // bar函数被调用

     // 2. 匿名函数 (参数列表){函数体};
     test(() {
       print("匿名函数被调用"); // 匿名函数被调用
       return 10;
     });

     // 3. 箭头函数：条件，函数体只有一行代码
     // 注意：Dart中的箭头函数与js中的箭头函数是两回事
     test(() => print("箭头函数被调用")); // 箭头函数被调用
   }

   // 函数可以作为另外一个函数的参数
   void test(Function foo) {
     var result = foo();
   }

   void bar() {
     print("bar函数被调用");
   }

   问题：上述代码中，当将函数作为另一个函数的参数时，使用 Function 来声明这个参数类型，很明显有个问题，那就是无法对传入的函数做限制：
   例如：
   main(List<String> args) {
     test((name) {
       print(name); // lqr
     });
   }

   // 封装test函数，要求：传入一个函数
   // 缺点：Function无法对传入函数做限制（比如：函数的参数列表、返回值）
   void test(Function foo) {
     foo("lqr");
   }

   这时，可以使用 函数签名 来代替 Function
   例如：
   main(List<String> args) {
     test((name) {
       print(name); // lqr
     });
   }

   // 封装test函数，要求：传入一个函数
   // 缺点：Function无法对传入函数做限制（比如：函数的参数列表、返回值）
   void test(Function foo) {
     foo("lqr");
   }

   为了有更好的可读性，可以使用 typedef 来代替 函数签名：
   main(List<String> args) {
     test((num1, num2) {
       return num1 + num2;
     });

     var demo1 = demo();
     print(demo1(20, 30)); // 600
   }

   // 可以使用typedef定义一个函数类型
   typedef Calculate = int Function(int num1, int num2);

   void test(Calculate calc) {
     calc(20, 30);
   }

   // 函数作为返回值
   Calculate demo() {
     return (num1, num2) {
       return num1 * num2;
     };
   }



























