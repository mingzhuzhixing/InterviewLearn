面试官常问的线程池，你真的了解吗

使用线程池的好处
    1、降低资源消耗：可以重复利用已创建的线程降低线程创建和销毁造成的消耗。

    2、提高响应速度：当任务到达时，任务可以不需要等到线程创建就能立即执行。

    3、提高线程的可管理性：线程是稀缺资源，如果无限制地创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一分配、调优和监控


线程池的工作原理
    首先我们看下当一个新的任务提交到线程池之后，线程池是如何处理的

    1、线程池判断核心线程池里的线程是否都在执行任务。如果不是，则创建一个新的工作线程来执行任务。如果核心线程池里的线程都在执行任务，则执行第二步。

    2、线程池判断工作队列是否已经满。如果工作队列没有满，则将新提交的任务存储在这个工作队列里进行等待。如果工作队列满了，则执行第三步

    3、线程池判断线程池的线程是否都处于工作状态。如果没有，则创建一个新的工作线程来执行任务。如果已经满了，则交给饱和策略来处理这个任务

线程池饱和策略
    这里提到了线程池的饱和策略，那我们就简单介绍下有哪些饱和策略：

    AbortPolicy:为Java线程池默认的阻塞策略，不执行此任务，而且直接抛出一个运行时异常，切记ThreadPoolExecutor.execute需要try catch，否则程序会直接退出。

    DiscardPolicy:直接抛弃，任务不执行，空方法

    DiscardOldestPolicy:从队列里面抛弃head的一个任务，并再次execute 此task。

    CallerRunsPolicy:在调用execute的线程里面执行此command，会阻塞入口

线程的运行状态
   RUNNING: 接受新任务并且处理已经进入阻塞队列的任务

   SHUTDOWN:不接受新任务，但是处理已经进入阻塞队列的任务

   STOP:不接受新任务，不处理已经进入阻塞队列的任务并且中断正在运行的任务

   TIDYING:所有任务都已经终止，workerCount为0，线程转化为tidying状态并且调用terminated钩子函数

   TERMINATED:terminated钩子函数已经运行完成

shutdown()
   启动一次顺序关闭，执行以前递交的任务，但不接受新任务




























