认识Service

service的启动：
一、startService():
    onBind为nul时：
    Service经历：onCreate->onStart()-->onStartCommand,其中：onCreate()只被调用一次, 但是继续调用onStart()-->onStartCommand

二、stopService();
    onBind为nul时：
        Service经历：onDestroy 只调用一次

    onBind不为null时：
        如果没有解绑，则不会调用onDestroy()，如果已经解绑则会调用onDestroy()

三、bindService()：
    如果已经启动service:
        点击绑定执行：onBind()-->onServiceConnected()  都是只被调用一次

    如果未启动service:
        否则直接点击绑定执行：onCreate()-->onBind()-->onServiceConnected()

四、unbindService()：
   如果已经调用了stopService();
     执行：onUnbind()--->onDestroy()

   如果未调用了stopService();
     执行：onUnbind()


   注意： 解绑执行：onUnbind()  多次点击解绑则直接报错（Service not registered: com.v.service.base_service.ServiceActivity$MyServiceConnection@a4e6dd0）



stopSelf(int startId) 和stopSelf()的区别
    startId：代表启动服务的次数，由系统生成。
    stopSelf(int startId)：
         在其参数startId跟最后启动该service时生成的ID相等时才会执行停止服务。
    stopSelf()：直接停止服务。
    使用场景：
         如果同时有多个服务启动请求发送到onStartCommand(),不应该在处理完一个请求后调用stopSelf()；
         因为在调用此函数销毁service之前，可能service又接收到新的启动请求，如果此时service被销毁，新的请求将得不到处理。
         此情况应该调用stopSelf(int startId)。请参见：IntentService


stopself()和stopservice（）
    stopself()方法执行之后发现service还在继续执行 并没有停掉，当完成所有功能之后，将service停掉，调用ondestory
    stopService 立刻停止服务 立刻调用service的ondestory方法


IntentService与Service的区别
    IntentService是继承并处理异步请求的一个类，在IntentService内有一个工作线程来处理耗时操作，启动IntentService的方式和启动传统的Service一样，
    同时，当任务执行完后，IntentService会自动停止，而不需要我们手动去控制或stopSelf()。另外，可以启动IntentService多次，
    而每一个耗时操作会以工作队列的方式在IntentService的onHandleIntent回调方法中执行，并且，每次只会执行一个工作线程，执行完第一个再执行第二个，

    IntentService特点：
    1.在任务完成后将自动停止。
    2.任务在队列中执行，是有先后顺序的。
    3.任务在子线程中运行，可以执行耗时任务。


两种开启服务方法的区别。

start方式开启服务。 一旦服务开启跟调用者(开启者)就没有任何关系了。开启者退出了，开启者挂了，服务还在后台长期的运行。开启者没有办法去调用服务里面的方法。（美国的司法独立）

bind的方式开启服务，绑定服务，调用者挂了，服务也会跟着挂掉。不求同时生，但求同时死。开启者可以调用服务里面的方法。



模块化：
    根据不同的关注点，将一个项目的可以共享的部分抽取出来，形成独立的Module，这就是模块化。
    模块化不只包含公共部分，当然也可以是业务模块。比如：图片加载模块

组件化：
     组件化是建立在模块化思想上的一次演进，一个变种。组件化本来就是模块化的概念。
     核心是模块角色的可转化换性，在打包时，是library；调试时，时application。组件化的单位是组件

插件化：
     严格意义来讲，其实也算是模块化的观念。将一个完整的工程，按业务划分为不同的插件，来化整为零，相互配合。
     插件化的单位是apk(一个完成的应用)。可以实现apk 的动态加载，动态更新，比组件化更灵活。





























