TCP/IP 是一类协议系统，它是用于网络通信的一套协议集合

7层：
    物理层--->数据链路层--->网络层--->传输层--->表示层--->应用层
                         ip       tcp/udp          http/ftp

TCP：传输控制协议
UDP：用户数据报协议

TCP三次握手
    第一次握手：客户端发送syn包到服务器，并进入SYN_SEND状态，等待服务器确认。
    第二次握手：服务器收到syn包，确认客户的SYN，同时自己也发送一个SYN包，即SYN+ACK包，此时服务器进入SYN_RECV状态。
    第三次握手：客户端收到服务器的SYN+ACK包，向�服务器发送确认包ACK，此包发送完毕，客户端和服务器进入ESTABKISHED状态，完成第三次握手。
    注意：三次握手中，发送的包都不包含数据，当三次握手完成后，客户端才开始正式发送数据。

连接终止协议（四次挥手）
    　 　由于TCP连接是全双工的，因此每个方向都必须单独进行关闭。这原则是当一方完成它的数据发送任务后就能发送一个FIN来终止这个方向的连接。收到一个 FIN只意味着这一方向上没有数据流动，一个TCP连接在收到一个FIN后仍能发送数据。首先进行关闭的一方将执行主动关闭，而另一方执行被动关闭。
   （1） TCP客户端发送一个FIN，用来关闭客户到服务器的数据传送（报文段4）。
   （2） 服务器收到这个FIN，它发回一个ACK，确认序号为收到的序号加1（报文段5）。和SYN一样，一个FIN将占用一个序号。
   （3） 服务器关闭客户端的连接，发送一个FIN给客户端（报文段6）。
   （4） 客户段发回ACK报文确认，并将确认序号设置为收到序号加1（报文段7）。

TCP和UDP的区别:

    TCP是确认包的到达，  所有不会丢失         顺序也好    （安全）   稳定   不较慢
        建立连接通道
        数据大小无限制
        速度慢，但是可靠性高

    UDP是不确认包的到达，所有可能会丢失数据包   顺序可能会乱 （不安全） 不稳定  比较快
        把数据打包
        数据大小有限制（64k）
        不建立连接
        速度快，但可靠性低


在 TCP / IP　协议中数据先由上往下将数据装包，然后由下往上拆包
在装包的时候，每一层都会增加一些信息用于传输，这部分信息就叫报头，当上层的数据到达本层的时候，会将数据加上本层的报头打包在一起，继续往下传递．
在拆包的时候，每一层将本层需要的报头读取后，就将剩下的数据往上传．


Http与Https的区别：
    HTTP 的URL 以http:// 开头，而HTTPS 的URL 以https:// 开头
    HTTP 是不安全的，而 HTTPS 是安全的
    HTTP 标准端口是80 ，而 HTTPS 的标准端口是443
    在OSI 网络模型中，HTTP工作于应用层，而HTTPS 的安全传输机制工作在传输层
    HTTP 无法加密，而HTTPS 对传输的数据进行加密
    HTTP无需证书，而HTTPS 需要CA机构wosign的颁发的SSL证书


URI和URL的区别
    URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。
        Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的
        URI一般由三部组成：
        ①访问资源的命名机制
        ②存放资源的主机名
        ③资源自身的名称，由路径表示，着重强调于资源。
    URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。
        URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上，特别是著名的Mosaic。
        采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL一般由三部组成：
        ①协议(或称为服务方式)
        ②存有该资源的主机IP地址(有时也包括端口号)
        ③主机资源的具体地址。如目录和文件名等
        URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:java-net@java.sun.com。

URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。笼统地说，每个 URL 都是 URI，但不一定每个 URI 都是 URL。这是因为 URI 还包括一个子类，即统一资源名称 (URN)，它命名资源但不指定如何定位资源。上面的 mailto、news 和 isbn URI 都是 URN 的示例。


常用的HTTP方法有哪些?
    GET： 用于请求访问已经被URI（统一资源标识符）识别的资源，可以通过URL传参给服务器
    POST：用于传输信息给服务器，主要功能与GET方法类似，但一般推荐使用POST方式。
    PUT： 传输文件，报文主体中包含文件内容，保存到对应URI位置。
    HEAD： 获得报文首部，与GET方法类似，只是不返回报文主体，一般用于验证URI是否有效。
    DELETE：删除文件，与PUT方法相反，删除对应URI位置的文件。
    OPTIONS：查询相应URI支持的HTTP方法。


HTTP请求报文与响应报文格式
    请求报文包含四部分：
        a、请求行：包含请求方法、URI、HTTP版本信息
        b、请求首部字段
        c、请求内容实体
        d、空行

    响应报文包含四部分:
        a、状态行：包含HTTP版本、状态码、状态码的原因短语
        b、响应首部字段
        c、响应内容实体
        d、空行
常见的首部：
    通用首部字段（请求报文与响应报文都会使用的首部字段）
        Date：创建报文时间
        Connection：连接的管理
        Cache-Control：缓存的控制
        Transfer-Encoding：报文主体的传输编码方式

    请求首部字段（请求报文会使用的首部字段）
        Host：请求资源所在服务器
        Accept：可处理的媒体类型
        Accept-Charset：可接收的字符集
        Accept-Encoding：可接受的内容编码
        Accept-Language：可接受的自然语言

    响应首部字段（响应报文会使用的首部字段）
        Accept-Ranges：可接受的字节范围
        Location：令客户端重新定向到的URI
        Server：HTTP服务器的安装信息

    实体首部字段（请求报文与响应报文的的实体部分使用的首部字段）
        Allow：资源可支持的HTTP方法
        Content-Type：实体主类的类型
        Content-Encoding：实体主体适用的编码方式
        Content-Language：实体主体的自然语言
        Content-Length：实体主体的的字节数
        Content-Range：实体主体的位置范围，一般用于发出部分请求时使用

XML-网络传输协议
    xml是一种最早的网络传输协议，常见于Java web开发中，不单单作为网络层的参数协议，还常见于各种配置文件中，在移动开发中也常见但是已不是主流的网络传输协议。
    优点：可读性强，解析方便； 
    缺点：效率不高，资源消耗过大； 
    解析方式：DOM解析，SAX解析，PULL解析；
    （1）DOM解析： 
        解析器读入整个文档，然后构建一个驻留内存的树结构，然后代码就可以使用 DOM 接口来操作这个树结构。优点：整个文档树在内存中，便于操作；支持删除、修改、重新排列等多种功能；缺点：将整个文档调入内存（包括无用的节点），浪费时间和空间；使用场合：一旦解析了文档还需多次访问这些数据；硬件资源充足（内存、CPU） 
    （2）SAX解析： 
        SAX ，事件驱动型解析方式。当解析器发现元素开始、元素结束、文本、文档的开始或结束等时，发送事件，程序员编写响应这些事件的代码，保存数据。优点：不用事先调入整个文档，占用资源少；SAX解析器代码比DOM解析器代码小，适于Applet，下载。缺点：不是持久的；事件过后，若没保存数据，那么数据就丢了；无状态性；从事件中只能得到文本，但不知该文本属于哪个元素；使用场合：Applet;只需XML文档的少量内容，很少回头访问；机器内存少； 
    （3）PULL解析： 
        PULL解析方式是Android专门为移动设备上解析XML文件而设计的一种解析方式，显而易见的其更加适用于移动设备解析xml文件。Pull解析和Sax解析很相似,Pull解析和Sax解析不一样的地方是pull读取xml文件后触发相应的事件调用方法返回的是数字还有pull可以在程序中控制想解析到哪里就可以停止解析。






